/**
 * generated by Xtext 2.16.0
 */
package de.fhdo.ewks.ml_example.formatting2;

import com.google.inject.Inject;
import de.fhdo.ewks.ml_example.Attribute;
import de.fhdo.ewks.ml_example.Context;
import de.fhdo.ewks.ml_example.Structure;
import de.fhdo.ewks.ml_example.services.DataStructureLanguageGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class DataStructureLanguageFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DataStructureLanguageGrammarAccess _dataStructureLanguageGrammarAccess;
  
  protected void _format(final Context context, @Extension final IFormattableDocument document) {
    EList<Structure> _structures = context.getStructures();
    for (final Structure structure : _structures) {
      document.<Structure>format(structure);
    }
  }
  
  protected void _format(final Structure structure, @Extension final IFormattableDocument document) {
    EList<Attribute> _attributes = structure.getAttributes();
    for (final Attribute attribute : _attributes) {
      document.<Attribute>format(attribute);
    }
  }
  
  public void format(final Object context, final IFormattableDocument document) {
    if (context instanceof XtextResource) {
      _format((XtextResource)context, document);
      return;
    } else if (context instanceof Context) {
      _format((Context)context, document);
      return;
    } else if (context instanceof Structure) {
      _format((Structure)context, document);
      return;
    } else if (context instanceof EObject) {
      _format((EObject)context, document);
      return;
    } else if (context == null) {
      _format((Void)null, document);
      return;
    } else if (context != null) {
      _format(context, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(context, document).toString());
    }
  }
}
