/*
 * generated by Xtext 2.16.0
 */
grammar InternalDataStructureLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.fhdo.ewks.ml_example.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.fhdo.ewks.ml_example.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.fhdo.ewks.ml_example.services.DataStructureLanguageGrammarAccess;

}
@parser::members {
	private DataStructureLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(DataStructureLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleContext
entryRuleContext
:
{ before(grammarAccess.getContextRule()); }
	 ruleContext
{ after(grammarAccess.getContextRule()); } 
	 EOF 
;

// Rule Context
ruleContext 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContextAccess().getGroup()); }
		(rule__Context__Group__0)
		{ after(grammarAccess.getContextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStructure
entryRuleStructure
:
{ before(grammarAccess.getStructureRule()); }
	 ruleStructure
{ after(grammarAccess.getStructureRule()); } 
	 EOF 
;

// Rule Structure
ruleStructure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStructureAccess().getGroup()); }
		(rule__Structure__Group__0)
		{ after(grammarAccess.getStructureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Type
ruleType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_0()); }
		('boolean')
		{ after(grammarAccess.getTypeAccess().getBOOLEANEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getDOUBLEEnumLiteralDeclaration_1()); }
		('double')
		{ after(grammarAccess.getTypeAccess().getDOUBLEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getFLOATEnumLiteralDeclaration_2()); }
		('float')
		{ after(grammarAccess.getTypeAccess().getFLOATEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getINTEGEREnumLiteralDeclaration_3()); }
		('int')
		{ after(grammarAccess.getTypeAccess().getINTEGEREnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getSTRINGEnumLiteralDeclaration_4()); }
		('string')
		{ after(grammarAccess.getTypeAccess().getSTRINGEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Context__Group__0__Impl
	rule__Context__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContextAccess().getContextKeyword_0()); }
	'context'
	{ after(grammarAccess.getContextAccess().getContextKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Context__Group__1__Impl
	rule__Context__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContextAccess().getNameAssignment_1()); }
	(rule__Context__NameAssignment_1)
	{ after(grammarAccess.getContextAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Context__Group__2__Impl
	rule__Context__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContextAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getContextAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Context__Group__3__Impl
	rule__Context__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getContextAccess().getStructuresAssignment_3()); }
		(rule__Context__StructuresAssignment_3)
		{ after(grammarAccess.getContextAccess().getStructuresAssignment_3()); }
	)
	(
		{ before(grammarAccess.getContextAccess().getStructuresAssignment_3()); }
		(rule__Context__StructuresAssignment_3)*
		{ after(grammarAccess.getContextAccess().getStructuresAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Context__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContextAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getContextAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Structure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Structure__Group__0__Impl
	rule__Structure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructureAccess().getStructureKeyword_0()); }
	'structure'
	{ after(grammarAccess.getStructureAccess().getStructureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Structure__Group__1__Impl
	rule__Structure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructureAccess().getNameAssignment_1()); }
	(rule__Structure__NameAssignment_1)
	{ after(grammarAccess.getStructureAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Structure__Group__2__Impl
	rule__Structure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructureAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getStructureAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Structure__Group__3__Impl
	rule__Structure__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructureAccess().getAttributesAssignment_3()); }
	(rule__Structure__AttributesAssignment_3)
	{ after(grammarAccess.getStructureAccess().getAttributesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Structure__Group__4__Impl
	rule__Structure__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructureAccess().getGroup_4()); }
	(rule__Structure__Group_4__0)*
	{ after(grammarAccess.getStructureAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Structure__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructureAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getStructureAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Structure__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Structure__Group_4__0__Impl
	rule__Structure__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructureAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getStructureAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Structure__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructureAccess().getAttributesAssignment_4_1()); }
	(rule__Structure__AttributesAssignment_4_1)
	{ after(grammarAccess.getStructureAccess().getAttributesAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getTypeAssignment_0()); }
	(rule__Attribute__TypeAssignment_0)
	{ after(grammarAccess.getAttributeAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
	(rule__Attribute__NameAssignment_1)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Context__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContextAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getContextAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__StructuresAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContextAccess().getStructuresStructureParserRuleCall_3_0()); }
		ruleStructure
		{ after(grammarAccess.getContextAccess().getStructuresStructureParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructureAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStructureAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__AttributesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructureAccess().getAttributesAttributeParserRuleCall_3_0()); }
		ruleAttribute
		{ after(grammarAccess.getStructureAccess().getAttributesAttributeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Structure__AttributesAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructureAccess().getAttributesAttributeParserRuleCall_4_1_0()); }
		ruleAttribute
		{ after(grammarAccess.getStructureAccess().getAttributesAttributeParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getTypeTypeEnumRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getAttributeAccess().getTypeTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
